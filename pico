import platform
import os
import threading
import time
try:
    import RPi.GPIO as GPIO
except ImportError:
    GPIO = None  # For non-Pi testing
from flask import Flask, request, render_template_string

# GPIO setup
LED_PIN = 17  # Use GPIO17 (Pin 11)
if GPIO:
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(LED_PIN, GPIO.OUT)

# Shared state
led_on = False
blink_delay = 1.0
stop_blink = False

# Flask app
app = Flask(__name__)

HTML = '''
<!doctype html>
<title>LED Control</title>
<h2>LED Control Panel</h2>
<form method="post">
    <label>LED State:</label>
    <select name="led_state">
        <option value="on" {% if led_on %}selected{% endif %}>ON</option>
        <option value="off" {% if not led_on %}selected{% endif %}>OFF</option>
    </select><br><br>
    <label>Blink Delay (seconds):</label>
    <input type="number" step="0.1" name="delay" value="{{ delay }}"><br><br>
    <input type="submit" value="Update">
</form>
<p>Current LED State: <b>{{ 'ON' if led_on else 'OFF' }}</b></p>
<p>Current Blink Delay: <b>{{ delay }}</b> seconds</p>
'''

@app.route('/', methods=['GET', 'POST'])
def control():
    global led_on, blink_delay
    if request.method == 'POST':
        led_on = request.form.get('led_state') == 'on'
        try:
            blink_delay = float(request.form.get('delay', blink_delay))
        except ValueError:
            pass
        print(f"[WEB] LED set to {'ON' if led_on else 'OFF'}, delay set to {blink_delay}s")
    return render_template_string(HTML, led_on=led_on, delay=blink_delay)

def led_blinker():
    global led_on, blink_delay, stop_blink
    while not stop_blink:
        if led_on:
            if GPIO:
                GPIO.output(LED_PIN, GPIO.HIGH)
            print("LED ON")
            time.sleep(blink_delay)
            if GPIO:
                GPIO.output(LED_PIN, GPIO.LOW)
            print("LED OFF")
            time.sleep(blink_delay)
        else:
            if GPIO:
                GPIO.output(LED_PIN, GPIO.LOW)
            time.sleep(0.1)

def get_pi_info():
    print("Platform:", platform.platform())
    print("Machine:", platform.machine())
    print("Processor:", platform.processor())

def check_network():
    response = os.system("ping -c 1 8.8.8.8 > /dev/null 2>&1")
    if response == 0:
        print("Network is up!")
    else:
        print("Network is down.")

if __name__ == "__main__":
    get_pi_info()
    check_network()
    blinker_thread = threading.Thread(target=led_blinker, daemon=True)
    blinker_thread.start()
    try:
        app.run(host='0.0.0.0', port=5000)
    finally:
        stop_blink = True
        if GPIO:
            GPIO.cleanup()